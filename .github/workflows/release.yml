name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Run tests
        run: go test -v ./...

  build-binaries:
    name: Build Linux Binaries
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: linux
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" \
            -o ldaplite-linux-${{ matrix.arch }} \
            ./cmd/ldaplite

      - name: Create tarball
        run: |
          tar -czf ldaplite-linux-${{ matrix.arch }}.tar.gz \
            ldaplite-linux-${{ matrix.arch }} \
            README.md \
            QUICKSTART.md

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ldaplite-linux-${{ matrix.arch }}
          path: ldaplite-linux-${{ matrix.arch }}.tar.gz

  build-docker:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    needs: [build-binaries, build-docker]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## ldaplite ${{ steps.version.outputs.VERSION }}

          ### Docker Images

          Multi-architecture Docker images are available:

          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```

          Supported architectures:
          - `linux/amd64`
          - `linux/arm64`

          ### Linux Binaries

          Pre-built binaries for Linux are attached to this release:
          - `ldaplite-linux-amd64.tar.gz` - Intel/AMD 64-bit
          - `ldaplite-linux-arm64.tar.gz` - ARM 64-bit

          ### Installation

          Download and extract the binary for your architecture:

          ```bash
          # For AMD64
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/ldaplite-linux-amd64.tar.gz
          tar -xzf ldaplite-linux-amd64.tar.gz
          chmod +x ldaplite-linux-amd64
          ./ldaplite-linux-amd64 version

          # For ARM64
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/ldaplite-linux-arm64.tar.gz
          tar -xzf ldaplite-linux-arm64.tar.gz
          chmod +x ldaplite-linux-arm64
          ./ldaplite-linux-arm64 version
          ```

          ### Changes

          See commit history for detailed changes.
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/ldaplite-linux-amd64/ldaplite-linux-amd64.tar.gz
            artifacts/ldaplite-linux-arm64/ldaplite-linux-arm64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
